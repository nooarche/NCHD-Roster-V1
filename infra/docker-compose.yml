services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: roster
      POSTGRES_PASSWORD: roster
      POSTGRES_DB: rosterdb
    ports: ["5432:5432"]
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U roster -d rosterdb"]
      interval: 2s
      timeout: 2s
      retries: 15

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./env/backend.env
    depends_on:
      db:
        condition: service_healthy
    ports: ["8000:8000"]

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    # IMPORTANT: make the frontend call /api (nginx will route it)
    environment:
      - VITE_API_BASE=/api
    depends_on:
      - backend
    ports: ["5173:5173"]

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      - frontend
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"     # â†’ visit http://localhost

volumes:
  pgdata:
